trigger:
  branches:
    include:
      - main  # Run the pipeline on changes to the main branch

# Pipeline Variables
variables:
  terraformVersion: '1.5.3'                     # Specify the desired Terraform version
  azureServiceConnection: 'azure_connection'  # Replace with your Azure DevOps service connection name
  tfWorkingDirectory: './terraform'             # Directory where your Terraform code resides (update if needed)

# Pool definition
pool:
  vmImage: 'ubuntu-latest'

steps:
  # Step 1: Install Terraform
   - script: |
       sudo apt-get update && sudo apt-get install -y software-properties-common
       sudo apt-add-repository --yes --update ppa:ansible/ansible
       sudo apt-get install ansible -y

       # Install Terraform
       wget https://releases.hashicorp.com/terraform/1.0.11/terraform_1.0.11_linux_amd64.zip
       unzip terraform_1.0.11_linux_amd64.zip
       sudo mv terraform /usr/local/bin/

        # Install Azure CLI
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
     displayName: 'Install Terraform and Azure CLI'

   - checkout: self

  # Step 2: Terraform Init
   - task: TerraformCLI@0
     displayName: 'Terraform Init'
     inputs:
        command: 'init'
        workingDirectory: $(tfWorkingDirectory)
        environmentServiceName: $(azureServiceConnection)

  # Step 3: Terraform Plan
   - task: TerraformCLI@0
     displayName: 'Terraform Plan'
     inputs:
        command: 'Plan'
        workingDirectory: $(tfWorkingDirectory)
        environmentServiceName: $(azureServiceConnection)
        
  # Step 4: Terraform Apply
   - task: TerraformCLI@0
     displayName: 'Terraform Apply'
     inputs:
        command: 'Apply'
        workingDirectory: $(tfWorkingDirectory)
        environmentServiceName: $(azureServiceConnection)
        commandOptions: '-auto-approve'  # Skips the confirmation prompt

