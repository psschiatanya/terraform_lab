# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
    echo Hello world 2 
  displayName: 'Run a multi-line script'
  
- script: |
    echo Bye
  displayName: 'Bye Script'    
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@1
  inputs:
    terraformVersion: 'latest'
- task: AzureCLI@2
  displayName: "Login to Azure"
  inputs:
    azureSubscription: azure_connection
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Logging in with Service Principal..."
      az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
      az account set --subscription $(AZURE_SUBSCRIPTION_ID)

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: " Terrafrom Init"
  inputs:
    command: init
    backendServiceArm: azure_connection
    backendAzureRmResourceGroupName: tfstate-tfdemo-rg
    backendAzureRmStorageAccountName: tfstatedemostg1234
    backendAzureRmContainerName: terraformstatecontainer
    backendAzureRmKey: terraform.tfstate
    workingDirectory: $(System.DefaultWorkingDirectory)
    
      
      
       
        

    
    

    
