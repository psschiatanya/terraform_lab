trigger:
  branches:
    include:
      - main  # Run the pipeline on changes to the main branch

# Pipeline Variables
variables:
  terraformVersion: '1.5.3'                     # Specify the desired Terraform version
  azureServiceConnection: 'azure_connection'  # Replace with your Azure DevOps service connection name
  tfWorkingDirectory: './terraform'             # Directory where your Terraform code resides (update if needed)

# Pool definition
pool:
  vmImage: 'ubuntu-latest'

steps:
  # Step 1: Install Terraform
   - script: |
      echo "Downloading Terraform..."
      curl -sSL https://releases.hashicorp.com/terraform/${terraformVersion}/terraform_${terraformVersion}_linux_amd64.zip -o terraform.zip
      
      echo "Unzipping Terraform package..."
      unzip terraform.zip

      echo "Moving Terraform to /usr/local/bin..."
      sudo mv terraform /usr/local/bin/terraform
      
      echo "Checking Terraform version..."
      terraform -version
     displayName: 'Install Terraform'

  # Step 2: Terraform Init
   - task: TerraformCLI@0
     displayName: 'Terraform Init'
     inputs:
        command: 'init'
        workingDirectory: $(tfWorkingDirectory)
        environmentServiceName: $(azureServiceConnection)

  # Step 3: Terraform Plan
   - task: TerraformCLI@0
     displayName: 'Terraform Plan'
     inputs:
        command: 'Plan'
        workingDirectory: $(tfWorkingDirectory)
        environmentServiceName: $(azureServiceConnection)
        
  # Step 4: Terraform Apply
   - task: TerraformCLI@0
     displayName: 'Terraform Apply'
     inputs:
        command: 'Apply'
        workingDirectory: $(tfWorkingDirectory)
        environmentServiceName: $(azureServiceConnection)
        commandOptions: '-auto-approve'  # Skips the confirmation prompt

