trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Terraform settings
  terraformVersion: '1.5.0'  # Adjust based on the version you want to use
  workingDirectory: $(System.DefaultWorkingDirectory)/terraform
  tfstateStorageAccount: 'tfstatedemostg1234'   # Storage account for remote backend (optional)
  tfstateContainer: 'terraformstatecontainer'            # Container in the storage account (optional)
  tfstateFile: 'terraform.tfstate'

steps:

# Install Terraform
- task: HashiCorpTerraformInstaller@0
  inputs:
    terraformVersion: $(terraformVersion)

# Authenticate to Azure using Service Principal
- task: AzureCLI@2
  inputs:
    azureSubscription: 'YourServiceConnectionName'  # Replace with your Azure service connection name
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Logging in with Azure CLI"
      az login --service-principal -u $(servicePrincipalId) -p $(servicePrincipalKey) --tenant $(tenantId)
    addSpnToEnvironment: true

# Initialize Terraform
- task: TerraformTaskV2@2
  displayName: 'Terraform Init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: $(workingDirectory)
    backendServiceArm: 'YourServiceConnectionName'   # Optional if using a remote backend
    backendAzureRmResourceGroupName: 'yourResourceGroup'
    backendAzureRmStorageAccountName: $(tfstateStorageAccount)
    backendAzureRmContainerName: $(tfstateContainer)
    backendAzureRmKey: $(tfstateFile)

# Validate Terraform
- task: TerraformTaskV2@2
  displayName: 'Terraform Validate'
  inputs:
    provider: 'azurerm'
    command: 'validate'
    workingDirectory: $(workingDirectory)

# Plan Terraform Deployment
- task: TerraformTaskV2@2
  displayName: 'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: $(workingDirectory)
    environmentServiceName: 'YourServiceConnectionName'
    additionalArguments: '-out=tfplan'

# Apply Terraform (requires approval for production environments)
- task: TerraformTaskV2@2
  displayName: 'Terraform Apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: $(workingDirectory)
    environmentServiceName: 'YourServiceConnectionName'
    additionalArguments: 'tfplan'
    runAgentService: 'true'  # Optionally set to require approval for production

# Optional: Upload Terraform state file as build artifact
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(workingDirectory)/terraform.tfstate'
    artifact: 'terraform_state'
    publishLocation: 'pipeline'
